module Proto.Kifu exposing (..)

-- DO NOT EDIT
-- AUTOGENERATED BY THE ELM PROTOCOL BUFFER COMPILER
-- https://github.com/tiziano88/elm-protobuf
-- source file: proto/kifu.proto

import Protobuf exposing (..)

import Json.Decode as JD
import Json.Encode as JE


uselessDeclarationToPreventErrorDueToEmptyOutputFile = 42


type alias RecentKifuRequest =
    { limit : Int -- 1
    }


recentKifuRequestDecoder : JD.Decoder RecentKifuRequest
recentKifuRequestDecoder =
    JD.lazy <| \_ -> decode RecentKifuRequest
        |> required "limit" intDecoder 0


recentKifuRequestEncoder : RecentKifuRequest -> JE.Value
recentKifuRequestEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "limit" JE.int 0 v.limit)
        ]


type alias RecentKifuResponse =
    { kifus : List RecentKifuResponse_Kifu -- 1
    }


recentKifuResponseDecoder : JD.Decoder RecentKifuResponse
recentKifuResponseDecoder =
    JD.lazy <| \_ -> decode RecentKifuResponse
        |> repeated "kifus" recentKifuResponse_KifuDecoder


recentKifuResponseEncoder : RecentKifuResponse -> JE.Value
recentKifuResponseEncoder v =
    JE.object <| List.filterMap identity <|
        [ (repeatedFieldEncoder "kifus" recentKifuResponse_KifuEncoder v.kifus)
        ]


type alias RecentKifuResponse_Kifu =
    { userId : String -- 1
    , kifuId : String -- 2
    , startTs : Int -- 3
    , handicap : String -- 4
    , gameName : String -- 5
    , firstPlayers : List String -- 6
    , secondPlayers : List String -- 7
    , note : String -- 8
    , version : Int -- 9
    }


recentKifuResponse_KifuDecoder : JD.Decoder RecentKifuResponse_Kifu
recentKifuResponse_KifuDecoder =
    JD.lazy <| \_ -> decode RecentKifuResponse_Kifu
        |> required "userId" JD.string ""
        |> required "kifuId" JD.string ""
        |> required "startTs" intDecoder 0
        |> required "handicap" JD.string ""
        |> required "gameName" JD.string ""
        |> repeated "firstPlayers" JD.string
        |> repeated "secondPlayers" JD.string
        |> required "note" JD.string ""
        |> required "version" intDecoder 0


recentKifuResponse_KifuEncoder : RecentKifuResponse_Kifu -> JE.Value
recentKifuResponse_KifuEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "userId" JE.string "" v.userId)
        , (requiredFieldEncoder "kifuId" JE.string "" v.kifuId)
        , (requiredFieldEncoder "startTs" numericStringEncoder 0 v.startTs)
        , (requiredFieldEncoder "handicap" JE.string "" v.handicap)
        , (requiredFieldEncoder "gameName" JE.string "" v.gameName)
        , (repeatedFieldEncoder "firstPlayers" JE.string v.firstPlayers)
        , (repeatedFieldEncoder "secondPlayers" JE.string v.secondPlayers)
        , (requiredFieldEncoder "note" JE.string "" v.note)
        , (requiredFieldEncoder "version" numericStringEncoder 0 v.version)
        ]


type alias PostKifuRequest =
    { payload : String -- 1
    , format : String -- 2
    , encoding : String -- 3
    }


postKifuRequestDecoder : JD.Decoder PostKifuRequest
postKifuRequestDecoder =
    JD.lazy <| \_ -> decode PostKifuRequest
        |> required "payload" JD.string ""
        |> required "format" JD.string ""
        |> required "encoding" JD.string ""


postKifuRequestEncoder : PostKifuRequest -> JE.Value
postKifuRequestEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "payload" JE.string "" v.payload)
        , (requiredFieldEncoder "format" JE.string "" v.format)
        , (requiredFieldEncoder "encoding" JE.string "" v.encoding)
        ]


type alias PostKifuResponse =
    { kifuId : String -- 1
    , version : Int -- 2
    }


postKifuResponseDecoder : JD.Decoder PostKifuResponse
postKifuResponseDecoder =
    JD.lazy <| \_ -> decode PostKifuResponse
        |> required "kifuId" JD.string ""
        |> required "version" intDecoder 0


postKifuResponseEncoder : PostKifuResponse -> JE.Value
postKifuResponseEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "kifuId" JE.string "" v.kifuId)
        , (requiredFieldEncoder "version" numericStringEncoder 0 v.version)
        ]


type alias DeleteKifuRequest =
    { kifuId : String -- 1
    , version : Int -- 2
    }


deleteKifuRequestDecoder : JD.Decoder DeleteKifuRequest
deleteKifuRequestDecoder =
    JD.lazy <| \_ -> decode DeleteKifuRequest
        |> required "kifuId" JD.string ""
        |> required "version" intDecoder 0


deleteKifuRequestEncoder : DeleteKifuRequest -> JE.Value
deleteKifuRequestEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "kifuId" JE.string "" v.kifuId)
        , (requiredFieldEncoder "version" numericStringEncoder 0 v.version)
        ]


type alias DeleteKifuResponse =
    {
    }


deleteKifuResponseDecoder : JD.Decoder DeleteKifuResponse
deleteKifuResponseDecoder =
    JD.lazy <| \_ -> decode DeleteKifuResponse


deleteKifuResponseEncoder : DeleteKifuResponse -> JE.Value
deleteKifuResponseEncoder v =
    JE.object <| List.filterMap identity <|
        [
        ]


type alias GetKifuRequest =
    { kifuId : String -- 1
    }


getKifuRequestDecoder : JD.Decoder GetKifuRequest
getKifuRequestDecoder =
    JD.lazy <| \_ -> decode GetKifuRequest
        |> required "kifuId" JD.string ""


getKifuRequestEncoder : GetKifuRequest -> JE.Value
getKifuRequestEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "kifuId" JE.string "" v.kifuId)
        ]


type alias Pos =
    { x : Int -- 1
    , y : Int -- 2
    }


posDecoder : JD.Decoder Pos
posDecoder =
    JD.lazy <| \_ -> decode Pos
        |> required "x" intDecoder 0
        |> required "y" intDecoder 0


posEncoder : Pos -> JE.Value
posEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "x" JE.int 0 v.x)
        , (requiredFieldEncoder "y" JE.int 0 v.y)
        ]


type alias Piece =
    {
    }


type Piece_Id
    = Piece_Null -- 0
    | Piece_Gyoku -- 1
    | Piece_Hisha -- 2
    | Piece_Ryu -- 3
    | Piece_Kaku -- 4
    | Piece_Uma -- 5
    | Piece_Kin -- 6
    | Piece_Gin -- 7
    | Piece_NariGin -- 8
    | Piece_Kei -- 9
    | Piece_NariKei -- 10
    | Piece_Kyou -- 11
    | Piece_NariKyou -- 12
    | Piece_Fu -- 13
    | Piece_To -- 14


pieceDecoder : JD.Decoder Piece
pieceDecoder =
    JD.lazy <| \_ -> decode Piece


piece_IdDecoder : JD.Decoder Piece_Id
piece_IdDecoder =
    let
        lookup s =
            case s of
                "NULL" ->
                    Piece_Null

                "GYOKU" ->
                    Piece_Gyoku

                "HISHA" ->
                    Piece_Hisha

                "RYU" ->
                    Piece_Ryu

                "KAKU" ->
                    Piece_Kaku

                "UMA" ->
                    Piece_Uma

                "KIN" ->
                    Piece_Kin

                "GIN" ->
                    Piece_Gin

                "NARI_GIN" ->
                    Piece_NariGin

                "KEI" ->
                    Piece_Kei

                "NARI_KEI" ->
                    Piece_NariKei

                "KYOU" ->
                    Piece_Kyou

                "NARI_KYOU" ->
                    Piece_NariKyou

                "FU" ->
                    Piece_Fu

                "TO" ->
                    Piece_To

                _ ->
                    Piece_Null
    in
        JD.map lookup JD.string


piece_IdDefault : Piece_Id
piece_IdDefault = Piece_Null


pieceEncoder : Piece -> JE.Value
pieceEncoder v =
    JE.object <| List.filterMap identity <|
        [
        ]


piece_IdEncoder : Piece_Id -> JE.Value
piece_IdEncoder v =
    let
        lookup s =
            case s of
                Piece_Null ->
                    "NULL"

                Piece_Gyoku ->
                    "GYOKU"

                Piece_Hisha ->
                    "HISHA"

                Piece_Ryu ->
                    "RYU"

                Piece_Kaku ->
                    "KAKU"

                Piece_Uma ->
                    "UMA"

                Piece_Kin ->
                    "KIN"

                Piece_Gin ->
                    "GIN"

                Piece_NariGin ->
                    "NARI_GIN"

                Piece_Kei ->
                    "KEI"

                Piece_NariKei ->
                    "NARI_KEI"

                Piece_Kyou ->
                    "KYOU"

                Piece_NariKyou ->
                    "NARI_KYOU"

                Piece_Fu ->
                    "FU"

                Piece_To ->
                    "TO"

    in
        JE.string <| lookup v


type alias FinishedStatus =
    {
    }


type FinishedStatus_Id
    = FinishedStatus_NotFinished -- 0
    | FinishedStatus_Suspend -- 1
    | FinishedStatus_Surrender -- 2
    | FinishedStatus_Draw -- 3
    | FinishedStatus_RepetitionDraw -- 4
    | FinishedStatus_Checkmate -- 5
    | FinishedStatus_OverTimeLimit -- 6
    | FinishedStatus_FoulLoss -- 7
    | FinishedStatus_FoulWin -- 8
    | FinishedStatus_NyugyokuWin -- 9


finishedStatusDecoder : JD.Decoder FinishedStatus
finishedStatusDecoder =
    JD.lazy <| \_ -> decode FinishedStatus


finishedStatus_IdDecoder : JD.Decoder FinishedStatus_Id
finishedStatus_IdDecoder =
    let
        lookup s =
            case s of
                "NOT_FINISHED" ->
                    FinishedStatus_NotFinished

                "SUSPEND" ->
                    FinishedStatus_Suspend

                "SURRENDER" ->
                    FinishedStatus_Surrender

                "DRAW" ->
                    FinishedStatus_Draw

                "REPETITION_DRAW" ->
                    FinishedStatus_RepetitionDraw

                "CHECKMATE" ->
                    FinishedStatus_Checkmate

                "OVER_TIME_LIMIT" ->
                    FinishedStatus_OverTimeLimit

                "FOUL_LOSS" ->
                    FinishedStatus_FoulLoss

                "FOUL_WIN" ->
                    FinishedStatus_FoulWin

                "NYUGYOKU_WIN" ->
                    FinishedStatus_NyugyokuWin

                _ ->
                    FinishedStatus_NotFinished
    in
        JD.map lookup JD.string


finishedStatus_IdDefault : FinishedStatus_Id
finishedStatus_IdDefault = FinishedStatus_NotFinished


finishedStatusEncoder : FinishedStatus -> JE.Value
finishedStatusEncoder v =
    JE.object <| List.filterMap identity <|
        [
        ]


finishedStatus_IdEncoder : FinishedStatus_Id -> JE.Value
finishedStatus_IdEncoder v =
    let
        lookup s =
            case s of
                FinishedStatus_NotFinished ->
                    "NOT_FINISHED"

                FinishedStatus_Suspend ->
                    "SUSPEND"

                FinishedStatus_Surrender ->
                    "SURRENDER"

                FinishedStatus_Draw ->
                    "DRAW"

                FinishedStatus_RepetitionDraw ->
                    "REPETITION_DRAW"

                FinishedStatus_Checkmate ->
                    "CHECKMATE"

                FinishedStatus_OverTimeLimit ->
                    "OVER_TIME_LIMIT"

                FinishedStatus_FoulLoss ->
                    "FOUL_LOSS"

                FinishedStatus_FoulWin ->
                    "FOUL_WIN"

                FinishedStatus_NyugyokuWin ->
                    "NYUGYOKU_WIN"

    in
        JE.string <| lookup v


type alias Value =
    { name : String -- 1
    , value : String -- 2
    }


valueDecoder : JD.Decoder Value
valueDecoder =
    JD.lazy <| \_ -> decode Value
        |> required "name" JD.string ""
        |> required "value" JD.string ""


valueEncoder : Value -> JE.Value
valueEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "name" JE.string "" v.name)
        , (requiredFieldEncoder "value" JE.string "" v.value)
        ]


type alias GetKifuResponse =
    { userId : String -- 1
    , kifuId : String -- 2
    , startTs : Int -- 3
    , endTs : Int -- 4
    , handicap : String -- 5
    , gameName : String -- 6
    , firstPlayers : List GetKifuResponse_Player -- 7
    , secondPlayers : List GetKifuResponse_Player -- 8
    , otherFields : List Value -- 9
    , sfen : String -- 10
    , createdTs : Int -- 11
    , steps : List GetKifuResponse_Step -- 12
    , note : String -- 13
    , version : Int -- 14
    }


getKifuResponseDecoder : JD.Decoder GetKifuResponse
getKifuResponseDecoder =
    JD.lazy <| \_ -> decode GetKifuResponse
        |> required "userId" JD.string ""
        |> required "kifuId" JD.string ""
        |> required "startTs" intDecoder 0
        |> required "endTs" intDecoder 0
        |> required "handicap" JD.string ""
        |> required "gameName" JD.string ""
        |> repeated "firstPlayers" getKifuResponse_PlayerDecoder
        |> repeated "secondPlayers" getKifuResponse_PlayerDecoder
        |> repeated "otherFields" valueDecoder
        |> required "sfen" JD.string ""
        |> required "createdTs" intDecoder 0
        |> repeated "steps" getKifuResponse_StepDecoder
        |> required "note" JD.string ""
        |> required "version" intDecoder 0


getKifuResponseEncoder : GetKifuResponse -> JE.Value
getKifuResponseEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "userId" JE.string "" v.userId)
        , (requiredFieldEncoder "kifuId" JE.string "" v.kifuId)
        , (requiredFieldEncoder "startTs" numericStringEncoder 0 v.startTs)
        , (requiredFieldEncoder "endTs" numericStringEncoder 0 v.endTs)
        , (requiredFieldEncoder "handicap" JE.string "" v.handicap)
        , (requiredFieldEncoder "gameName" JE.string "" v.gameName)
        , (repeatedFieldEncoder "firstPlayers" getKifuResponse_PlayerEncoder v.firstPlayers)
        , (repeatedFieldEncoder "secondPlayers" getKifuResponse_PlayerEncoder v.secondPlayers)
        , (repeatedFieldEncoder "otherFields" valueEncoder v.otherFields)
        , (requiredFieldEncoder "sfen" JE.string "" v.sfen)
        , (requiredFieldEncoder "createdTs" numericStringEncoder 0 v.createdTs)
        , (repeatedFieldEncoder "steps" getKifuResponse_StepEncoder v.steps)
        , (requiredFieldEncoder "note" JE.string "" v.note)
        , (requiredFieldEncoder "version" numericStringEncoder 0 v.version)
        ]


type alias GetKifuResponse_Player =
    { name : String -- 1
    , note : String -- 2
    }


getKifuResponse_PlayerDecoder : JD.Decoder GetKifuResponse_Player
getKifuResponse_PlayerDecoder =
    JD.lazy <| \_ -> decode GetKifuResponse_Player
        |> required "name" JD.string ""
        |> required "note" JD.string ""


getKifuResponse_PlayerEncoder : GetKifuResponse_Player -> JE.Value
getKifuResponse_PlayerEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "name" JE.string "" v.name)
        , (requiredFieldEncoder "note" JE.string "" v.note)
        ]


type alias GetKifuResponse_Step =
    { seq : Int -- 1
    , position : String -- 2
    , src : Maybe Pos -- 3
    , dst : Maybe Pos -- 4
    , piece : Piece_Id -- 5
    , finishedStatus : FinishedStatus_Id -- 6
    , promoted : Bool -- 7
    , captured : Piece_Id -- 8
    , timestampSec : Int -- 9
    , thinkingSec : Int -- 10
    , notes : List String -- 11
    }


getKifuResponse_StepDecoder : JD.Decoder GetKifuResponse_Step
getKifuResponse_StepDecoder =
    JD.lazy <| \_ -> decode GetKifuResponse_Step
        |> required "seq" intDecoder 0
        |> required "position" JD.string ""
        |> optional "src" posDecoder
        |> optional "dst" posDecoder
        |> required "piece" piece_IdDecoder piece_IdDefault
        |> required "finishedStatus" finishedStatus_IdDecoder finishedStatus_IdDefault
        |> required "promoted" JD.bool False
        |> required "captured" piece_IdDecoder piece_IdDefault
        |> required "timestampSec" intDecoder 0
        |> required "thinkingSec" intDecoder 0
        |> repeated "notes" JD.string


getKifuResponse_StepEncoder : GetKifuResponse_Step -> JE.Value
getKifuResponse_StepEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "seq" JE.int 0 v.seq)
        , (requiredFieldEncoder "position" JE.string "" v.position)
        , (optionalEncoder "src" posEncoder v.src)
        , (optionalEncoder "dst" posEncoder v.dst)
        , (requiredFieldEncoder "piece" piece_IdEncoder piece_IdDefault v.piece)
        , (requiredFieldEncoder "finishedStatus" finishedStatus_IdEncoder finishedStatus_IdDefault v.finishedStatus)
        , (requiredFieldEncoder "promoted" JE.bool False v.promoted)
        , (requiredFieldEncoder "captured" piece_IdEncoder piece_IdDefault v.captured)
        , (requiredFieldEncoder "timestampSec" JE.int 0 v.timestampSec)
        , (requiredFieldEncoder "thinkingSec" JE.int 0 v.thinkingSec)
        , (repeatedFieldEncoder "notes" JE.string v.notes)
        ]


type alias GetSamePositionsRequest =
    { position : String -- 1
    , steps : Int -- 2
    , excludeKifuIds : List String -- 3
    }


getSamePositionsRequestDecoder : JD.Decoder GetSamePositionsRequest
getSamePositionsRequestDecoder =
    JD.lazy <| \_ -> decode GetSamePositionsRequest
        |> required "position" JD.string ""
        |> required "steps" intDecoder 0
        |> repeated "excludeKifuIds" JD.string


getSamePositionsRequestEncoder : GetSamePositionsRequest -> JE.Value
getSamePositionsRequestEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "position" JE.string "" v.position)
        , (requiredFieldEncoder "steps" JE.int 0 v.steps)
        , (repeatedFieldEncoder "excludeKifuIds" JE.string v.excludeKifuIds)
        ]


type alias GetSamePositionsResponse =
    { position : String -- 1
    , kifus : List GetSamePositionsResponse_Kifu -- 2
    }


getSamePositionsResponseDecoder : JD.Decoder GetSamePositionsResponse
getSamePositionsResponseDecoder =
    JD.lazy <| \_ -> decode GetSamePositionsResponse
        |> required "position" JD.string ""
        |> repeated "kifus" getSamePositionsResponse_KifuDecoder


getSamePositionsResponseEncoder : GetSamePositionsResponse -> JE.Value
getSamePositionsResponseEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "position" JE.string "" v.position)
        , (repeatedFieldEncoder "kifus" getSamePositionsResponse_KifuEncoder v.kifus)
        ]


type alias GetSamePositionsResponse_Step =
    { seq : Int -- 1
    , src : Maybe Pos -- 2
    , dst : Maybe Pos -- 3
    , piece : Piece_Id -- 4
    , promoted : Bool -- 5
    , finishedStatus : FinishedStatus_Id -- 6
    }


getSamePositionsResponse_StepDecoder : JD.Decoder GetSamePositionsResponse_Step
getSamePositionsResponse_StepDecoder =
    JD.lazy <| \_ -> decode GetSamePositionsResponse_Step
        |> required "seq" intDecoder 0
        |> optional "src" posDecoder
        |> optional "dst" posDecoder
        |> required "piece" piece_IdDecoder piece_IdDefault
        |> required "promoted" JD.bool False
        |> required "finishedStatus" finishedStatus_IdDecoder finishedStatus_IdDefault


getSamePositionsResponse_StepEncoder : GetSamePositionsResponse_Step -> JE.Value
getSamePositionsResponse_StepEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "seq" JE.int 0 v.seq)
        , (optionalEncoder "src" posEncoder v.src)
        , (optionalEncoder "dst" posEncoder v.dst)
        , (requiredFieldEncoder "piece" piece_IdEncoder piece_IdDefault v.piece)
        , (requiredFieldEncoder "promoted" JE.bool False v.promoted)
        , (requiredFieldEncoder "finishedStatus" finishedStatus_IdEncoder finishedStatus_IdDefault v.finishedStatus)
        ]


type alias GetSamePositionsResponse_Kifu =
    { userId : String -- 1
    , kifuId : String -- 2
    , seq : Int -- 3
    , steps : List GetSamePositionsResponse_Step -- 4
    }


getSamePositionsResponse_KifuDecoder : JD.Decoder GetSamePositionsResponse_Kifu
getSamePositionsResponse_KifuDecoder =
    JD.lazy <| \_ -> decode GetSamePositionsResponse_Kifu
        |> required "userId" JD.string ""
        |> required "kifuId" JD.string ""
        |> required "seq" intDecoder 0
        |> repeated "steps" getSamePositionsResponse_StepDecoder


getSamePositionsResponse_KifuEncoder : GetSamePositionsResponse_Kifu -> JE.Value
getSamePositionsResponse_KifuEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "userId" JE.string "" v.userId)
        , (requiredFieldEncoder "kifuId" JE.string "" v.kifuId)
        , (requiredFieldEncoder "seq" JE.int 0 v.seq)
        , (repeatedFieldEncoder "steps" getSamePositionsResponse_StepEncoder v.steps)
        ]
